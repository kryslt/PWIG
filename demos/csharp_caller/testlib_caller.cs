// ************************************************************************
// This file implements library imports for the caller.
// -------
// WARNING
// -------
// This file was generated by PWIG. Do not edit.
// File generated on 08.02.2024 12:22:07

// Note: You cannot use platform specific things in a Xamarin PCL!
// Following should be defined in Xamarin iOS project, but kept here for testing purposes
// #define __IOS__


namespace TestLib
{

  // Library properties:
  // Name: TestLib
  // Version: 1.0
  // GUID: F3C093C0-035B-4C33-BB28-C1FDE270D3B5
  // Description: Test library

  // Add platform specific namespaces
  #if __IOS__
  using ObjCRuntime;
  #endif

  // Interface aliases:

  using IProject = System.Int64;
  using IProjectGroup = System.Int64;
  using IProjectGroupEvents = System.Int64;

  // User defined aliases:

  // Alias type properties:
  // Name: TApplicationHandle
  // GUID: 6F9B4493-91C4-446A-8CBA-D55D05D11754
  // Description: Application handle

  using TApplicationHandle = System.Int64;

  // Alias type properties:
  // Name: TDataPtr
  // GUID: D687E02D-F3F1-49C9-84C9-2E11749B6412
  // Description: Pointer to array of bytes

  using TDataPtr = System.IntPtr;

  // User defined classes:

  // Name: ProjectGroup
  // GUID: 7C12BB43-A6AB-4A52-8B1D-EDD5D94B344B
  // Description: ProjectGroup Object

  public class ProjectGroup: System.IDisposable
  {

    // Event handlers:
    public delegate void IProjectGroupEventsOnError( TErrorCode ErrorCode,  System.String ErrorText);
    public event IProjectGroupEventsOnError OnError;

    public delegate void IProjectGroupEventsOnProgress( TProgressEvent EventCode,  System.Int32 ProgressValue,  System.String EventText);
    public event IProjectGroupEventsOnProgress OnProgress;

    // Event handler callbacks:
    private static LibInvoke.ProjectGroupIProjectGroupEventsOnError FProjectGroupIProjectGroupEventsOnError = new LibInvoke.ProjectGroupIProjectGroupEventsOnError(ProjectGroupIProjectGroupEventsOnError);


    #if __IOS__
    [MonoPInvokeCallback(typeof(LibInvoke.ProjectGroupIProjectGroupEventsOnError))]
    #endif
    private static System.Boolean ProjectGroupIProjectGroupEventsOnError(IProjectGroupEvents ItemHandle,  TErrorCode ErrorCode,  System.IntPtr ErrorText)
    {
      System.Boolean Result = false;
      try
      {
        System.Object cls = ((System.Runtime.InteropServices.GCHandle)(System.IntPtr)ItemHandle).Target;
        if ((cls is ProjectGroup) && (((ProjectGroup)cls).OnError != null))
        {
          ((ProjectGroup)cls).OnError( ErrorCode, LibInvoke.StringFromNativeUtf8(ErrorText));
        }
        Result = true;
      }
      catch (System.Exception e)
      {
        LibInvoke.LibCallError(e.Message);
      }
      return Result;
    }

    private static LibInvoke.ProjectGroupIProjectGroupEventsOnProgress FProjectGroupIProjectGroupEventsOnProgress = new LibInvoke.ProjectGroupIProjectGroupEventsOnProgress(ProjectGroupIProjectGroupEventsOnProgress);


    #if __IOS__
    [MonoPInvokeCallback(typeof(LibInvoke.ProjectGroupIProjectGroupEventsOnProgress))]
    #endif
    private static System.Boolean ProjectGroupIProjectGroupEventsOnProgress(IProjectGroupEvents ItemHandle,  TProgressEvent EventCode,  System.Int32 ProgressValue,  System.IntPtr EventText)
    {
      System.Boolean Result = false;
      try
      {
        System.Object cls = ((System.Runtime.InteropServices.GCHandle)(System.IntPtr)ItemHandle).Target;
        if ((cls is ProjectGroup) && (((ProjectGroup)cls).OnProgress != null))
        {
          ((ProjectGroup)cls).OnProgress( EventCode,  ProgressValue, LibInvoke.StringFromNativeUtf8(EventText));
        }
        Result = true;
      }
      catch (System.Exception e)
      {
        LibInvoke.LibCallError(e.Message);
      }
      return Result;
    }

    // Default interface handle:
    private IProjectGroup FItemHandle;

    public IProjectGroup Handle { get { return FItemHandle; }}

    // Constructor:
    public ProjectGroup(IProjectGroup AInterfaceHandle = 0)
    {
      try
      {
        FItemHandle = AInterfaceHandle;
        if (FItemHandle == 0)
        {
          if(!
            LibInvoke.ProjectGroupCreate(out FItemHandle)
          ) throw new System.Exception("ProjectGroupCreate");
        }
        OnError = null;
        if (!
          LibInvoke.SetProjectGroupIProjectGroupEventsOnError(FItemHandle, ((System.IntPtr)System.Runtime.InteropServices.GCHandle.Alloc(this)).ToInt64(), FProjectGroupIProjectGroupEventsOnError)
        ) throw new System.Exception("SetProjectGroupIProjectGroupEventsOnError");
        OnProgress = null;
        if (!
          LibInvoke.SetProjectGroupIProjectGroupEventsOnProgress(FItemHandle, ((System.IntPtr)System.Runtime.InteropServices.GCHandle.Alloc(this)).ToInt64(), FProjectGroupIProjectGroupEventsOnProgress)
        ) throw new System.Exception("SetProjectGroupIProjectGroupEventsOnProgress");
      }
      catch (System.Exception e)
      {
        LibInvoke.LibCallError(e.Message);
      }
    }

    // Destructor:
    ~ProjectGroup()
    {
      Dispose();
    }

    public virtual void Dispose()
    {
      try
      {
        if (FItemHandle != 0)
        {
          if(!
            LibInvoke.ProjectGroupDestroy(FItemHandle)
          ) throw new System.Exception("ProjectGroupDestroy");
          else
            FItemHandle = 0;
        }
      }
      catch (System.Exception e)
      {
        LibInvoke.LibCallError(e.Message);
      }
    }

    // Methods:
    public IProject AddProject()
    {
      IProject Project = 0;
      try
      {
        if(!
          LibInvoke.ProjectGroupIProjectGroupAddProject(FItemHandle, out Project)
        ) throw new System.Exception("ProjectGroupIProjectGroupAddProject");
      }
      catch (System.Exception e)
      {
        LibInvoke.LibCallError(e.Message);
      }
      return Project;
    }

    public void RunPeriodic()
    {
      try
      {
        if(!
          LibInvoke.ProjectGroupIProjectGroupRunPeriodic(FItemHandle)
        ) throw new System.Exception("ProjectGroupIProjectGroupRunPeriodic");
      }
      catch (System.Exception e)
      {
        LibInvoke.LibCallError(e.Message);
      }
    }

    public void FinalizeEx()
    {
      try
      {
        if(!
          LibInvoke.ProjectGroupIProjectGroupFinalize(FItemHandle)
        ) throw new System.Exception("ProjectGroupIProjectGroupFinalize");
      }
      catch (System.Exception e)
      {
        LibInvoke.LibCallError(e.Message);
      }
    }

    // Properties:
  }

  // Name: Project
  // GUID: D96EA22B-D750-4C05-9F32-8C5C8E9F846D
  // Description: Project Object

  public class Project: System.IDisposable
  {

    // Event handlers:
    // Event handler callbacks:
    // Default interface handle:
    private IProject FItemHandle;

    public IProject Handle { get { return FItemHandle; }}

    // Constructor:
    public Project(IProject AInterfaceHandle = 0)
    {
      try
      {
        FItemHandle = AInterfaceHandle;
        if (FItemHandle == 0)
        {
          if(!
            LibInvoke.ProjectCreate(out FItemHandle)
          ) throw new System.Exception("ProjectCreate");
        }
      }
      catch (System.Exception e)
      {
        LibInvoke.LibCallError(e.Message);
      }
    }

    // Destructor:
    ~Project()
    {
      Dispose();
    }

    public virtual void Dispose()
    {
      try
      {
        if (FItemHandle != 0)
        {
          if(!
            LibInvoke.ProjectDestroy(FItemHandle)
          ) throw new System.Exception("ProjectDestroy");
          else
            FItemHandle = 0;
        }
      }
      catch (System.Exception e)
      {
        LibInvoke.LibCallError(e.Message);
      }
    }

    // Methods:
    public void Connect()
    {
      try
      {
        if(!
          LibInvoke.ProjectIProjectConnect(FItemHandle)
        ) throw new System.Exception("ProjectIProjectConnect");
      }
      catch (System.Exception e)
      {
        LibInvoke.LibCallError(e.Message);
      }
    }

    public void Disconnect()
    {
      try
      {
        if(!
          LibInvoke.ProjectIProjectDisconnect(FItemHandle)
        ) throw new System.Exception("ProjectIProjectDisconnect");
      }
      catch (System.Exception e)
      {
        LibInvoke.LibCallError(e.Message);
      }
    }

    public TBool LoadFromFile( System.String Path)
    {
      TBool Result = TBool.bFalse;
      try
      {
        if(!
          LibInvoke.ProjectIProjectLoadFromFile(FItemHandle, LibInvoke.NativeUtf8FromString(Path), out Result)
        ) throw new System.Exception("ProjectIProjectLoadFromFile");
      }
      catch (System.Exception e)
      {
        LibInvoke.LibCallError(e.Message);
      }
      return Result;
    }

    public TBool SaveToFile( System.String Path)
    {
      TBool Result = TBool.bFalse;
      try
      {
        if(!
          LibInvoke.ProjectIProjectSaveToFile(FItemHandle, LibInvoke.NativeUtf8FromString(Path), out Result)
        ) throw new System.Exception("ProjectIProjectSaveToFile");
      }
      catch (System.Exception e)
      {
        LibInvoke.LibCallError(e.Message);
      }
      return Result;
    }

    // Properties:
    private System.Int32 GetConnectionFRC()
    {
      System.Int32 Value = 0;
      try
      {
        if(!
          LibInvoke.ProjectGetIProjectConnectionFRC(FItemHandle, out Value)
        ) throw new System.Exception("ProjectGetIProjectConnectionFRC");
      }
      catch (System.Exception e)
      {
        LibInvoke.LibCallError(e.Message);
      }
      return Value;
    }

    public System.Int32 ConnectionFRC
    {
      get
      {
        return GetConnectionFRC();
      }
    }

    private System.String GetConnectionString()
    {
      System.String Value = "";
      try
      {
        System.String String__Value = ""; System.Int32 Length__Value = 0;
        if(!
          LibInvoke.ProjectGetIProjectConnectionString(FItemHandle, System.IntPtr.Zero, ref Length__Value)
        ) throw new System.Exception("ProjectGetIProjectConnectionString");
        System.IntPtr Array__Value = System.Runtime.InteropServices.Marshal.AllocHGlobal(Length__Value + 1);
        if(!
          LibInvoke.ProjectGetIProjectConnectionString(FItemHandle, Array__Value, ref Length__Value)
        ) throw new System.Exception("ProjectGetIProjectConnectionString");
        String__Value = LibInvoke.StringFromNativeUtf8(Array__Value, Length__Value);
        System.Runtime.InteropServices.Marshal.FreeHGlobal(Array__Value);
        if (Length__Value > 0) Value = String__Value;
      }
      catch (System.Exception e)
      {
        LibInvoke.LibCallError(e.Message);
      }
      return Value;
    }

    public System.String ConnectionString
    {
      get
      {
        return GetConnectionString();
      }
    }

  }

  // Helper class for platform invoke calls:
  public class LibInvoke
  {

    #if __IOS__
    private const string cLibName = "@rpath/testlib.framework/testlib"; // needed to access library from local embedded framework
    #else
    private const string cLibName = "testlib";
    #endif

    public static System.IntPtr NativeUtf8FromString(string managedString)
    {
      int len = System.Text.Encoding.UTF8.GetByteCount(managedString);
      System.IntPtr nativeUtf8 = System.Runtime.InteropServices.Marshal.AllocHGlobal(len + 1);
      NativeUtf8FromStringByRef(nativeUtf8, managedString);
      return nativeUtf8;
    }

    public static void NativeUtf8FromStringByRef(System.IntPtr nativeUtf8, string managedString)
    {
      int len = System.Text.Encoding.UTF8.GetByteCount(managedString);
      byte[] buffer = new byte[len + 1];
      System.Text.Encoding.UTF8.GetBytes(managedString, 0, managedString.Length, buffer, 0);
      System.Runtime.InteropServices.Marshal.Copy(buffer, 0, nativeUtf8, buffer.Length);
    }

    public static string StringFromNativeUtf8(System.IntPtr nativeUtf8, System.Int32 length = 0)
    {
      int len = 0;
      if (length == 0)
        while (System.Runtime.InteropServices.Marshal.ReadByte(nativeUtf8, len) != 0) ++len;
      else
        len = length;
      byte[] buffer = new byte[len];
      System.Runtime.InteropServices.Marshal.Copy(nativeUtf8, buffer, 0, buffer.Length);
      return System.Text.Encoding.UTF8.GetString(buffer, 0, buffer.Length);
    }

    public static void LibCallError(System.String AFuncName)
    {
      throw new System.Exception(System.String.Format("Error while calling library function {0}!", AFuncName));
    }

    [global::System.Runtime.InteropServices.DllImport(cLibName, EntryPoint="GetLibGUID", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public static extern System.IntPtr GetLibGUID();

    public static System.Boolean LibCheck()
    {
      System.Boolean Result = false;
      try
      {
        System.String LibGUID = StringFromNativeUtf8(GetLibGUID());
        if (LibGUID != Global.cLibGUID)
          throw new System.Exception("Incompatible library interface!");
        Result = true;
      }
      catch (System.Exception e)
      {
        LibCallError(e.Message);
      }
      return Result;
    }

    // Name: ProjectGroup
    // GUID: 7C12BB43-A6AB-4A52-8B1D-EDD5D94B344B
    // Description: ProjectGroup Object

    // Constructor:
    [System.Runtime.InteropServices.DllImport(cLibName, EntryPoint="ProjectGroupCreate", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public static extern System.Boolean ProjectGroupCreate(out IProjectGroup ItemHandle);

    // Destructor:
    [System.Runtime.InteropServices.DllImport(cLibName, EntryPoint="ProjectGroupDestroy", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public static extern System.Boolean ProjectGroupDestroy(IProjectGroup ItemHandle);

    // Methods:
    [System.Runtime.InteropServices.DllImport(cLibName, EntryPoint="ProjectGroupIProjectGroupAddProject", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public static extern System.Boolean ProjectGroupIProjectGroupAddProject(IProjectGroup ItemHandle, out IProject Project);

    [System.Runtime.InteropServices.DllImport(cLibName, EntryPoint="ProjectGroupIProjectGroupRunPeriodic", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public static extern System.Boolean ProjectGroupIProjectGroupRunPeriodic(IProjectGroup ItemHandle);

    [System.Runtime.InteropServices.DllImport(cLibName, EntryPoint="ProjectGroupIProjectGroupFinalize", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public static extern System.Boolean ProjectGroupIProjectGroupFinalize(IProjectGroup ItemHandle);

    // Properties:
    // Event handler setters:
    [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public delegate System.Boolean ProjectGroupIProjectGroupEventsOnError(IProjectGroupEvents ItemHandle,  TErrorCode ErrorCode,  System.IntPtr ErrorText);

    [System.Runtime.InteropServices.DllImport(cLibName, EntryPoint="SetProjectGroupIProjectGroupEventsOnError", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public static extern System.Boolean SetProjectGroupIProjectGroupEventsOnError(IProjectGroup ItemHandle, IProjectGroupEvents EventSink, ProjectGroupIProjectGroupEventsOnError EventHandler);

    [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public delegate System.Boolean ProjectGroupIProjectGroupEventsOnProgress(IProjectGroupEvents ItemHandle,  TProgressEvent EventCode,  System.Int32 ProgressValue,  System.IntPtr EventText);

    [System.Runtime.InteropServices.DllImport(cLibName, EntryPoint="SetProjectGroupIProjectGroupEventsOnProgress", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public static extern System.Boolean SetProjectGroupIProjectGroupEventsOnProgress(IProjectGroup ItemHandle, IProjectGroupEvents EventSink, ProjectGroupIProjectGroupEventsOnProgress EventHandler);

    // Name: Project
    // GUID: D96EA22B-D750-4C05-9F32-8C5C8E9F846D
    // Description: Project Object

    // Constructor:
    [System.Runtime.InteropServices.DllImport(cLibName, EntryPoint="ProjectCreate", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public static extern System.Boolean ProjectCreate(out IProject ItemHandle);

    // Destructor:
    [System.Runtime.InteropServices.DllImport(cLibName, EntryPoint="ProjectDestroy", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public static extern System.Boolean ProjectDestroy(IProject ItemHandle);

    // Methods:
    [System.Runtime.InteropServices.DllImport(cLibName, EntryPoint="ProjectIProjectConnect", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public static extern System.Boolean ProjectIProjectConnect(IProject ItemHandle);

    [System.Runtime.InteropServices.DllImport(cLibName, EntryPoint="ProjectIProjectDisconnect", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public static extern System.Boolean ProjectIProjectDisconnect(IProject ItemHandle);

    [System.Runtime.InteropServices.DllImport(cLibName, EntryPoint="ProjectIProjectLoadFromFile", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public static extern System.Boolean ProjectIProjectLoadFromFile(IProject ItemHandle,  System.IntPtr Path, out TBool Result);

    [System.Runtime.InteropServices.DllImport(cLibName, EntryPoint="ProjectIProjectSaveToFile", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public static extern System.Boolean ProjectIProjectSaveToFile(IProject ItemHandle,  System.IntPtr Path, out TBool Result);

    // Properties:
    [System.Runtime.InteropServices.DllImport(cLibName, EntryPoint="ProjectGetIProjectConnectionFRC", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public static extern System.Boolean ProjectGetIProjectConnectionFRC(IProject ItemHandle, out System.Int32 Value);

    [System.Runtime.InteropServices.DllImport(cLibName, EntryPoint="ProjectGetIProjectConnectionString", CallingConvention=System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public static extern System.Boolean ProjectGetIProjectConnectionString(IProject ItemHandle, System.IntPtr Value, ref System.Int32 Length__Value);

  }
}
