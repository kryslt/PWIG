// ************************************************************************
// This file implements library imports for the caller.
// -------
// WARNING
// -------
// This file was generated by PWIG. Do not edit.
// File generated on 08.02.2024 12:22:07

// Library properties:
// Name: TestLib
// Version: 1.0
// GUID: F3C093C0-035B-4C33-BB28-C1FDE270D3B5
// Description: Test library

#include <algorithm>
#include <exception>
#include <string>
#include "stdafx.h"
#include "stdint.h"
#include "testlib_intf.h"
#include "testlib_caller.h"

//Local variables:
static HMODULE LibModule = 0;

// Name: ProjectGroup
// GUID: 7C12BB43-A6AB-4A52-8B1D-EDD5D94B344B
// Description: ProjectGroup Object

// Constructor:
static TProjectGroupCreate FuncProjectGroupCreate = NULL;
// Destructor:
static TProjectGroupDestroy FuncProjectGroupDestroy = NULL;
// Methods:
static TIProjectGroupAddProject FuncProjectGroupIProjectGroupAddProject = NULL;
static TIProjectGroupRunPeriodic FuncProjectGroupIProjectGroupRunPeriodic = NULL;
static TIProjectGroupFinalize FuncProjectGroupIProjectGroupFinalize = NULL;
// Properties:
// Event handler setters:
static TSetProjectGroupIProjectGroupEventsOnError FuncSetProjectGroupIProjectGroupEventsOnError = NULL;
static TSetProjectGroupIProjectGroupEventsOnProgress FuncSetProjectGroupIProjectGroupEventsOnProgress = NULL;

// Name: Project
// GUID: D96EA22B-D750-4C05-9F32-8C5C8E9F846D
// Description: Project Object

// Constructor:
static TProjectCreate FuncProjectCreate = NULL;
// Destructor:
static TProjectDestroy FuncProjectDestroy = NULL;
// Methods:
static TIProjectConnect FuncProjectIProjectConnect = NULL;
static TIProjectDisconnect FuncProjectIProjectDisconnect = NULL;
static TIProjectLoadFromFile FuncProjectIProjectLoadFromFile = NULL;
static TIProjectSaveToFile FuncProjectIProjectSaveToFile = NULL;
// Properties:
static TGetIProjectConnectionFRC FuncProjectGetIProjectConnectionFRC = NULL;
static TGetIProjectConnectionString FuncProjectGetIProjectConnectionString = NULL;

static void LibError(std::wstring AMessage)
{
  throw std::runtime_error(String2LibUtf8String(AMessage));
}

static void LibCallError(std::wstring AFuncName)
{
  LibError(L"Error while calling library function " + AFuncName + L"!");
}

static void LibLoadError(std::wstring AFuncName)
{
  LibError(L"Requested function " + AFuncName + L" does not exist in the library!");
}

bool TestLibLibLoad(std::wstring FileName)
{
  typedef char * (__cdecl *T_FuncLibID)(void);
  T_FuncLibID _FuncLibID;
  bool __Result = false;
  try
  {
    if (LibModule == 0)
    {
      LibModule = LoadLibrary(FileName.c_str());
    }
    if (LibModule != 0)
    {
      // Call library identification code first
      _FuncLibID = (T_FuncLibID)GetProcAddress(LibModule, "GetLibGUID");
      if (_FuncLibID == NULL) LibLoadError(L"GetLibGUID");
      char * id = _FuncLibID();
      if (strcmp(id, LIB_GUID) != 0) LibError(L"Incompatible library interface!");

      // Name: ProjectGroup
      // GUID: 7C12BB43-A6AB-4A52-8B1D-EDD5D94B344B
      // Description: ProjectGroup Object

      // Constructor:
      FuncProjectGroupCreate = (TProjectGroupCreate)GetProcAddress(LibModule, "ProjectGroupCreate");
      if (FuncProjectGroupCreate == NULL) LibLoadError(L"ProjectGroupCreate");
      // Destructor:
      FuncProjectGroupDestroy = (TProjectGroupDestroy)GetProcAddress(LibModule, "ProjectGroupDestroy");
      if (FuncProjectGroupDestroy == NULL) LibLoadError(L"ProjectGroupDestroy");
      // Methods:
      FuncProjectGroupIProjectGroupAddProject = (TIProjectGroupAddProject)GetProcAddress(LibModule, "ProjectGroupIProjectGroupAddProject");
      if (FuncProjectGroupIProjectGroupAddProject == NULL) LibLoadError(L"ProjectGroupIProjectGroupAddProject");
      FuncProjectGroupIProjectGroupRunPeriodic = (TIProjectGroupRunPeriodic)GetProcAddress(LibModule, "ProjectGroupIProjectGroupRunPeriodic");
      if (FuncProjectGroupIProjectGroupRunPeriodic == NULL) LibLoadError(L"ProjectGroupIProjectGroupRunPeriodic");
      FuncProjectGroupIProjectGroupFinalize = (TIProjectGroupFinalize)GetProcAddress(LibModule, "ProjectGroupIProjectGroupFinalize");
      if (FuncProjectGroupIProjectGroupFinalize == NULL) LibLoadError(L"ProjectGroupIProjectGroupFinalize");
      // Properties:
      // Event handler setters:
      FuncSetProjectGroupIProjectGroupEventsOnError = (TSetProjectGroupIProjectGroupEventsOnError)GetProcAddress(LibModule, "SetProjectGroupIProjectGroupEventsOnError");
      if (FuncSetProjectGroupIProjectGroupEventsOnError == NULL) LibLoadError(L"SetProjectGroupIProjectGroupEventsOnError");
      FuncSetProjectGroupIProjectGroupEventsOnProgress = (TSetProjectGroupIProjectGroupEventsOnProgress)GetProcAddress(LibModule, "SetProjectGroupIProjectGroupEventsOnProgress");
      if (FuncSetProjectGroupIProjectGroupEventsOnProgress == NULL) LibLoadError(L"SetProjectGroupIProjectGroupEventsOnProgress");
      // Name: Project
      // GUID: D96EA22B-D750-4C05-9F32-8C5C8E9F846D
      // Description: Project Object

      // Constructor:
      FuncProjectCreate = (TProjectCreate)GetProcAddress(LibModule, "ProjectCreate");
      if (FuncProjectCreate == NULL) LibLoadError(L"ProjectCreate");
      // Destructor:
      FuncProjectDestroy = (TProjectDestroy)GetProcAddress(LibModule, "ProjectDestroy");
      if (FuncProjectDestroy == NULL) LibLoadError(L"ProjectDestroy");
      // Methods:
      FuncProjectIProjectConnect = (TIProjectConnect)GetProcAddress(LibModule, "ProjectIProjectConnect");
      if (FuncProjectIProjectConnect == NULL) LibLoadError(L"ProjectIProjectConnect");
      FuncProjectIProjectDisconnect = (TIProjectDisconnect)GetProcAddress(LibModule, "ProjectIProjectDisconnect");
      if (FuncProjectIProjectDisconnect == NULL) LibLoadError(L"ProjectIProjectDisconnect");
      FuncProjectIProjectLoadFromFile = (TIProjectLoadFromFile)GetProcAddress(LibModule, "ProjectIProjectLoadFromFile");
      if (FuncProjectIProjectLoadFromFile == NULL) LibLoadError(L"ProjectIProjectLoadFromFile");
      FuncProjectIProjectSaveToFile = (TIProjectSaveToFile)GetProcAddress(LibModule, "ProjectIProjectSaveToFile");
      if (FuncProjectIProjectSaveToFile == NULL) LibLoadError(L"ProjectIProjectSaveToFile");
      // Properties:
      FuncProjectGetIProjectConnectionFRC = (TGetIProjectConnectionFRC)GetProcAddress(LibModule, "ProjectGetIProjectConnectionFRC");
      if (FuncProjectGetIProjectConnectionFRC == NULL) LibLoadError(L"ProjectGetIProjectConnectionFRC");
      FuncProjectGetIProjectConnectionString = (TGetIProjectConnectionString)GetProcAddress(LibModule, "ProjectGetIProjectConnectionString");
      if (FuncProjectGetIProjectConnectionString == NULL) LibLoadError(L"ProjectGetIProjectConnectionString");
      __Result = true;
    }
  }
  catch (std::exception& e)
  {
  }
  return __Result;
}

void TestLibLibUnload()
{
  if (LibModule != 0)
    FreeLibrary(LibModule);
  LibModule = 0;

  // Name: ProjectGroup
  // GUID: 7C12BB43-A6AB-4A52-8B1D-EDD5D94B344B
  // Description: ProjectGroup Object

  // Constructor:
  FuncProjectGroupCreate = NULL;
  // Destructor:
  FuncProjectGroupDestroy = NULL;
  // Methods:
  FuncProjectGroupIProjectGroupAddProject = NULL;
  FuncProjectGroupIProjectGroupRunPeriodic = NULL;
  FuncProjectGroupIProjectGroupFinalize = NULL;
  // Properties:
  // Event handler setters:
  FuncSetProjectGroupIProjectGroupEventsOnError = NULL;
  FuncSetProjectGroupIProjectGroupEventsOnProgress = NULL;

  // Name: Project
  // GUID: D96EA22B-D750-4C05-9F32-8C5C8E9F846D
  // Description: Project Object

  // Constructor:
  FuncProjectCreate = NULL;
  // Destructor:
  FuncProjectDestroy = NULL;
  // Methods:
  FuncProjectIProjectConnect = NULL;
  FuncProjectIProjectDisconnect = NULL;
  FuncProjectIProjectLoadFromFile = NULL;
  FuncProjectIProjectSaveToFile = NULL;
  // Properties:
  FuncProjectGetIProjectConnectionFRC = NULL;
  FuncProjectGetIProjectConnectionString = NULL;

}

// Name: ProjectGroup
// GUID: 7C12BB43-A6AB-4A52-8B1D-EDD5D94B344B
// Description: ProjectGroup Object

// Event handler callbacks:

bool __cdecl ProjectGroupIProjectGroupEventsOnError(IProjectGroupEvents ItemHandle, TErrorCode ErrorCode, char * ErrorText)
{
  bool __Result = false;
  try
  {
    ProjectGroup * __Cls = dynamic_cast<ProjectGroup*>((ProjectGroup*)ItemHandle);
    __Cls->CallEventOnError(ErrorCode, LibUtf8String2String(ErrorText));
    __Result = true;
  }
  catch (std::exception& e)
  {
  }
  return __Result;
}


bool __cdecl ProjectGroupIProjectGroupEventsOnProgress(IProjectGroupEvents ItemHandle, TProgressEvent EventCode, int32_t ProgressValue, char * EventText)
{
  bool __Result = false;
  try
  {
    ProjectGroup * __Cls = dynamic_cast<ProjectGroup*>((ProjectGroup*)ItemHandle);
    __Cls->CallEventOnProgress(EventCode, ProgressValue, LibUtf8String2String(EventText));
    __Result = true;
  }
  catch (std::exception& e)
  {
  }
  return __Result;
}

// Constructor:
ProjectGroup::ProjectGroup(IProjectGroup AInterfaceHandle)
{
  try
  {
    m_ItemHandle = AInterfaceHandle;
    if ((m_ItemHandle == 0) && (*FuncProjectGroupCreate != NULL))
      FuncProjectGroupCreate(m_ItemHandle);
    if (*FuncSetProjectGroupIProjectGroupEventsOnError != NULL)
    {
      if (!
        FuncSetProjectGroupIProjectGroupEventsOnError(m_ItemHandle, (IProjectGroupEvents)this, ProjectGroupIProjectGroupEventsOnError)
      ) LibError(L"FuncSetProjectGroupIProjectGroupEventsOnError");
    }
    if (*FuncSetProjectGroupIProjectGroupEventsOnProgress != NULL)
    {
      if (!
        FuncSetProjectGroupIProjectGroupEventsOnProgress(m_ItemHandle, (IProjectGroupEvents)this, ProjectGroupIProjectGroupEventsOnProgress)
      ) LibError(L"FuncSetProjectGroupIProjectGroupEventsOnProgress");
    }
  }
  catch (std::exception& e)
  {
      LibCallError(LibUtf8String2String((char*)e.what()));
  }
}

// Destructor:
ProjectGroup::~ProjectGroup()
{
  try
  {
    if (*FuncProjectGroupDestroy != NULL)
      FuncProjectGroupDestroy(m_ItemHandle);
  }
  catch (std::exception& e)
  {
      LibCallError(LibUtf8String2String((char*)e.what()));
  }
}

// Methods:
IProject ProjectGroup::AddProject()
{
  IProject Project = 0;
  try
  {
    if (*FuncProjectGroupIProjectGroupAddProject != NULL)
    {
      if (!
        FuncProjectGroupIProjectGroupAddProject(m_ItemHandle, Project)
      ) LibError(L"FuncProjectGroupIProjectGroupAddProject");
    }
  }
  catch (std::exception& e)
  {
      LibCallError(LibUtf8String2String((char*)e.what()));
  }
  return Project;
}

void ProjectGroup::RunPeriodic()
{
  try
  {
    if (*FuncProjectGroupIProjectGroupRunPeriodic != NULL)
    {
      if (!
        FuncProjectGroupIProjectGroupRunPeriodic(m_ItemHandle)
      ) LibError(L"FuncProjectGroupIProjectGroupRunPeriodic");
    }
  }
  catch (std::exception& e)
  {
      LibCallError(LibUtf8String2String((char*)e.what()));
  }
}

void ProjectGroup::Finalize()
{
  try
  {
    if (*FuncProjectGroupIProjectGroupFinalize != NULL)
    {
      if (!
        FuncProjectGroupIProjectGroupFinalize(m_ItemHandle)
      ) LibError(L"FuncProjectGroupIProjectGroupFinalize");
    }
  }
  catch (std::exception& e)
  {
      LibCallError(LibUtf8String2String((char*)e.what()));
  }
}

// Properties:
IProjectGroup ProjectGroup::__GetHandle(void)
{
  return m_ItemHandle;
}

void ProjectGroup::CallEventOnError(TErrorCode ErrorCode, std::wstring ErrorText)
{
}

void ProjectGroup::CallEventOnProgress(TProgressEvent EventCode, int32_t ProgressValue, std::wstring EventText)
{
}


// Name: Project
// GUID: D96EA22B-D750-4C05-9F32-8C5C8E9F846D
// Description: Project Object

// Constructor:
Project::Project(IProject AInterfaceHandle)
{
  try
  {
    m_ItemHandle = AInterfaceHandle;
    if ((m_ItemHandle == 0) && (*FuncProjectCreate != NULL))
      FuncProjectCreate(m_ItemHandle);
  }
  catch (std::exception& e)
  {
      LibCallError(LibUtf8String2String((char*)e.what()));
  }
}

// Destructor:
Project::~Project()
{
  try
  {
    if (*FuncProjectDestroy != NULL)
      FuncProjectDestroy(m_ItemHandle);
  }
  catch (std::exception& e)
  {
      LibCallError(LibUtf8String2String((char*)e.what()));
  }
}

// Methods:
void Project::Connect()
{
  try
  {
    if (*FuncProjectIProjectConnect != NULL)
    {
      if (!
        FuncProjectIProjectConnect(m_ItemHandle)
      ) LibError(L"FuncProjectIProjectConnect");
    }
  }
  catch (std::exception& e)
  {
      LibCallError(LibUtf8String2String((char*)e.what()));
  }
}

void Project::Disconnect()
{
  try
  {
    if (*FuncProjectIProjectDisconnect != NULL)
    {
      if (!
        FuncProjectIProjectDisconnect(m_ItemHandle)
      ) LibError(L"FuncProjectIProjectDisconnect");
    }
  }
  catch (std::exception& e)
  {
      LibCallError(LibUtf8String2String((char*)e.what()));
  }
}

TBool Project::LoadFromFile(std::wstring Path)
{
  TBool Result = (TBool)bFalse;
  try
  {
    if (*FuncProjectIProjectLoadFromFile != NULL)
    {
      if (!
        FuncProjectIProjectLoadFromFile(m_ItemHandle, (char *)String2LibUtf8String(Path).c_str(), Result)
      ) LibError(L"FuncProjectIProjectLoadFromFile");
    }
  }
  catch (std::exception& e)
  {
      LibCallError(LibUtf8String2String((char*)e.what()));
  }
  return Result;
}

TBool Project::SaveToFile(std::wstring Path)
{
  TBool Result = (TBool)bFalse;
  try
  {
    if (*FuncProjectIProjectSaveToFile != NULL)
    {
      if (!
        FuncProjectIProjectSaveToFile(m_ItemHandle, (char *)String2LibUtf8String(Path).c_str(), Result)
      ) LibError(L"FuncProjectIProjectSaveToFile");
    }
  }
  catch (std::exception& e)
  {
      LibCallError(LibUtf8String2String((char*)e.what()));
  }
  return Result;
}

// Properties:
int32_t Project::GetConnectionFRC()
{
  int32_t Value = 0;
  try
  {
    if (*FuncProjectGetIProjectConnectionFRC != NULL)
    {
      if (!
        FuncProjectGetIProjectConnectionFRC(m_ItemHandle, Value)
      ) LibError(L"FuncProjectGetIProjectConnectionFRC");
    }
  }
  catch (std::exception& e)
  {
      LibCallError(LibUtf8String2String((char*)e.what()));
  }
  return Value;
}

std::wstring Project::GetConnectionString()
{
  std::wstring Value = L"";
  char * AnsiString__Value;
  int32_t Length__Value;
  try
  {
    if (*FuncProjectGetIProjectConnectionString != NULL)
    {
      Length__Value = 0;
      if (!
        FuncProjectGetIProjectConnectionString(m_ItemHandle, NULL, Length__Value)
      ) LibError(L"FuncProjectGetIProjectConnectionString");
      AnsiString__Value = new char[LibMax(Length__Value + 1, 1)];
      if (!
        FuncProjectGetIProjectConnectionString(m_ItemHandle, AnsiString__Value, Length__Value)
      ) LibError(L"FuncProjectGetIProjectConnectionString");
      AnsiString__Value[Length__Value] = 0;
      if (Length__Value > 0) Value = LibUtf8String2String(AnsiString__Value);
      delete AnsiString__Value;
    }
  }
  catch (std::exception& e)
  {
      LibCallError(LibUtf8String2String((char*)e.what()));
  }
  return Value;
}

IProject Project::__GetHandle(void)
{
  return m_ItemHandle;
}



