// ************************************************************************
// This file implements library exports for the callee.
// -------
// WARNING
// -------
// This file was generated by PWIG. Do not edit.
// File generated on 08.02.2024 12:22:07

unit testlib_callee;

{$IFDEF FPC}{$MODE DELPHI}{$ENDIF}

// Library properties:
// Name: TestLib
// Version: 1.0
// GUID: F3C093C0-035B-4C33-BB28-C1FDE270D3B5
// Description: Test library

interface

uses
  Classes, testlib_intf;

// Copy these class declarations into testlib_callee_impl.pas and implement them there.
// Note: testlib_callee_impl.pas is not maintained by PWIG and must be implemented by library author!
(*
type

  // Forward declarations:
  TProjectGroup = class;
  TProject = class;

  // Name: ProjectGroup
  // GUID: 7C12BB43-A6AB-4A52-8B1D-EDD5D94B344B
  // Description: ProjectGroup Object

  TProjectGroup = class(TObject)
  private
    FEvents: TIProjectGroupEvents;
  public
    constructor Create;
    destructor Destroy; override;
    // Methods:
    function AddProject: IProject;
    procedure RunPeriodic;
    procedure Finalize;
    // Properties:
    // Setup event handlers:
    procedure SetupOnError(const EventSink: IProjectGroupEvents; const EventHandler: TIProjectGroupEventsOnError);
    procedure SetupOnProgress(const EventSink: IProjectGroupEvents; const EventHandler: TIProjectGroupEventsOnProgress);
  end;

  // Name: Project
  // GUID: D96EA22B-D750-4C05-9F32-8C5C8E9F846D
  // Description: Project Object

  TProject = class(TObject)
  private
  public
    constructor Create;
    destructor Destroy; override;
    // Methods:
    procedure Connect;
    procedure Disconnect;
    function LoadFromFile(const Path: string): TBool;
    function SaveToFile(const Path: string): TBool;
    // Properties:
    function GetConnectionFRC: LongInt;
    function GetConnectionString: string;
  end;

// End of declarations to be copied to testlib_callee_impl.pas file.
*)

// Name: IProjectGroupEvents
// GUID: 08199EC9-1D26-442A-BE88-7B953C71EC7E
// Description: Events interface for ProjectGroup Object

// Wrapper class for IProjectGroupEvents interface event sinks:

type
  TIProjectGroupEvents = class(TObject)
  private
    FOnErrorEventSink: IProjectGroupEvents;
    FOnErrorEventHandler: TIProjectGroupEventsOnError;
    FOnProgressEventSink: IProjectGroupEvents;
    FOnProgressEventHandler: TIProjectGroupEventsOnProgress;
  public
    constructor Create;
    // Setup event handlers:
    procedure SetupOnError(const EventSink: IProjectGroupEvents; const EventHandler: TIProjectGroupEventsOnError);
    procedure SetupOnProgress(const EventSink: IProjectGroupEvents; const EventHandler: TIProjectGroupEventsOnProgress);
    // Call event handlers:
    procedure OnError(const ErrorCode: TErrorCode; const ErrorText: string);
    procedure OnProgress(const EventCode: TProgressEvent; const ProgressValue: LongInt; const EventText: string);
  end;

// Library identification code
function GetLibGUID: PAnsiChar; cdecl;

// Name: ProjectGroup
// GUID: 7C12BB43-A6AB-4A52-8B1D-EDD5D94B344B
// Description: ProjectGroup Object

// Constructor:
function ProjectGroupCreate(out ItemHandle:IProjectGroup): Boolean; cdecl;
// Destructor:
function ProjectGroupDestroy(ItemHandle: IProjectGroup): Boolean; cdecl;
// Methods:
function ProjectGroupIProjectGroupAddProject(const ItemHandle: IProjectGroup; out Project: IProject): Boolean; cdecl;
function ProjectGroupIProjectGroupRunPeriodic(const ItemHandle: IProjectGroup): Boolean; cdecl;
function ProjectGroupIProjectGroupFinalize(const ItemHandle: IProjectGroup): Boolean; cdecl;
// Properties:
// Event handler setters:
function SetProjectGroupIProjectGroupEventsOnError(const ItemHandle:IProjectGroup; const EventSink: IProjectGroupEvents; const EventHandler: TIProjectGroupEventsOnError): Boolean; cdecl;
function SetProjectGroupIProjectGroupEventsOnProgress(const ItemHandle:IProjectGroup; const EventSink: IProjectGroupEvents; const EventHandler: TIProjectGroupEventsOnProgress): Boolean; cdecl;

// Name: Project
// GUID: D96EA22B-D750-4C05-9F32-8C5C8E9F846D
// Description: Project Object

// Constructor:
function ProjectCreate(out ItemHandle:IProject): Boolean; cdecl;
// Destructor:
function ProjectDestroy(ItemHandle: IProject): Boolean; cdecl;
// Methods:
function ProjectIProjectConnect(const ItemHandle: IProject): Boolean; cdecl;
function ProjectIProjectDisconnect(const ItemHandle: IProject): Boolean; cdecl;
function ProjectIProjectLoadFromFile(const ItemHandle: IProject; const Path: PAnsiChar; out ResultParam: TBool): Boolean; cdecl;
function ProjectIProjectSaveToFile(const ItemHandle: IProject; const Path: PAnsiChar; out ResultParam: TBool): Boolean; cdecl;
// Properties:
function ProjectGetIProjectConnectionFRC(const ItemHandle: IProject; out Value: LongInt): Boolean; cdecl;
function ProjectGetIProjectConnectionString(const ItemHandle: IProject; const Value: PAnsiChar; var Length__Value: LongInt): Boolean; cdecl;


implementation

uses
  Math, SysUtils, testlib_callee_impl;

// Library identification code
function GetLibGUID: PAnsiChar; cdecl;
begin
  Result := cLibGUID;
end;

// Name: ProjectGroup
// GUID: 7C12BB43-A6AB-4A52-8B1D-EDD5D94B344B
// Description: ProjectGroup Object

// Constructor:
function ProjectGroupCreate(out ItemHandle:IProjectGroup): Boolean; cdecl;
begin
  try
    ItemHandle := IProjectGroup(TProjectGroup.Create);
    Result := True;
  except
    Result := False;
  end;
end;

// Destructor:
function ProjectGroupDestroy(ItemHandle: IProjectGroup): Boolean; cdecl;
begin
  Result := False;
  try
    if TObject(ItemHandle) is TProjectGroup then
    begin
      TProjectGroup(ItemHandle).Free;
      Result := True;
    end;
  except
  end;
end;

// Methods:

function ProjectGroupIProjectGroupAddProject(const ItemHandle: IProjectGroup; out Project: IProject): Boolean; cdecl;
begin
  Result := False;
  try
    if TObject(ItemHandle) is TProjectGroup then
    begin
      Project := TProjectGroup(ItemHandle).AddProject;
      Result := True;
    end;
  except
  end;
end;


function ProjectGroupIProjectGroupRunPeriodic(const ItemHandle: IProjectGroup): Boolean; cdecl;
begin
  Result := False;
  try
    if TObject(ItemHandle) is TProjectGroup then
    begin
      TProjectGroup(ItemHandle).RunPeriodic;
      Result := True;
    end;
  except
  end;
end;


function ProjectGroupIProjectGroupFinalize(const ItemHandle: IProjectGroup): Boolean; cdecl;
begin
  Result := False;
  try
    if TObject(ItemHandle) is TProjectGroup then
    begin
      TProjectGroup(ItemHandle).Finalize;
      Result := True;
    end;
  except
  end;
end;

// Properties:
// Event handler setters:
function SetProjectGroupIProjectGroupEventsOnError(const ItemHandle:IProjectGroup; const EventSink: IProjectGroupEvents; const EventHandler: TIProjectGroupEventsOnError): Boolean; cdecl;
begin
  Result := False;
  try
    if TObject(ItemHandle) is TProjectGroup then
    begin
      TProjectGroup(ItemHandle).SetupOnError(EventSink, EventHandler);
      Result := True;
    end;
  except
  end;
end;

function SetProjectGroupIProjectGroupEventsOnProgress(const ItemHandle:IProjectGroup; const EventSink: IProjectGroupEvents; const EventHandler: TIProjectGroupEventsOnProgress): Boolean; cdecl;
begin
  Result := False;
  try
    if TObject(ItemHandle) is TProjectGroup then
    begin
      TProjectGroup(ItemHandle).SetupOnProgress(EventSink, EventHandler);
      Result := True;
    end;
  except
  end;
end;


// Name: Project
// GUID: D96EA22B-D750-4C05-9F32-8C5C8E9F846D
// Description: Project Object

// Constructor:
function ProjectCreate(out ItemHandle:IProject): Boolean; cdecl;
begin
  try
    ItemHandle := IProject(TProject.Create);
    Result := True;
  except
    Result := False;
  end;
end;

// Destructor:
function ProjectDestroy(ItemHandle: IProject): Boolean; cdecl;
begin
  Result := False;
  try
    if TObject(ItemHandle) is TProject then
    begin
      TProject(ItemHandle).Free;
      Result := True;
    end;
  except
  end;
end;

// Methods:

function ProjectIProjectConnect(const ItemHandle: IProject): Boolean; cdecl;
begin
  Result := False;
  try
    if TObject(ItemHandle) is TProject then
    begin
      TProject(ItemHandle).Connect;
      Result := True;
    end;
  except
  end;
end;


function ProjectIProjectDisconnect(const ItemHandle: IProject): Boolean; cdecl;
begin
  Result := False;
  try
    if TObject(ItemHandle) is TProject then
    begin
      TProject(ItemHandle).Disconnect;
      Result := True;
    end;
  except
  end;
end;


function ProjectIProjectLoadFromFile(const ItemHandle: IProject; const Path: PAnsiChar; out ResultParam: TBool): Boolean; cdecl;
begin
  Result := False;
  try
    if TObject(ItemHandle) is TProject then
    begin
      ResultParam := TProject(ItemHandle).LoadFromFile(LibUtf8String2String(Path));
      Result := True;
    end;
  except
  end;
end;


function ProjectIProjectSaveToFile(const ItemHandle: IProject; const Path: PAnsiChar; out ResultParam: TBool): Boolean; cdecl;
begin
  Result := False;
  try
    if TObject(ItemHandle) is TProject then
    begin
      ResultParam := TProject(ItemHandle).SaveToFile(LibUtf8String2String(Path));
      Result := True;
    end;
  except
  end;
end;

// Properties:

function ProjectGetIProjectConnectionFRC(const ItemHandle: IProject; out Value: LongInt): Boolean; cdecl;
begin
  Result := False;
  try
    if TObject(ItemHandle) is TProject then
    begin
      Value := TProject(ItemHandle).GetConnectionFRC;
      Result := True;
    end;
  except
  end;
end;

var
  String__ProjectIProjectConnectionStringValue: string;
  AnsiString__ProjectIProjectConnectionStringValue: AnsiString;

function ProjectGetIProjectConnectionString(const ItemHandle: IProject; const Value: PAnsiChar; var Length__Value: LongInt): Boolean; cdecl;
begin
  Result := False;
  try
    if TObject(ItemHandle) is TProject then
    begin
      if Value = nil then
      begin
        String__ProjectIProjectConnectionStringValue := TProject(ItemHandle).GetConnectionString;
        AnsiString__ProjectIProjectConnectionStringValue := String2LibUtf8String(String__ProjectIProjectConnectionStringValue);
        Length__Value := Length(AnsiString__ProjectIProjectConnectionStringValue);
      end else
      begin
        if Length(AnsiString__ProjectIProjectConnectionStringValue) > 0 then
          System.Move(AnsiString__ProjectIProjectConnectionStringValue[1], Value^, Min(Length__Value, Length(AnsiString__ProjectIProjectConnectionStringValue)));
      end;
      Result := True;
    end;
  except
  end;
end;


// Name: IProjectGroupEvents
// GUID: 08199EC9-1D26-442A-BE88-7B953C71EC7E
// Description: Events interface for ProjectGroup Object


constructor TIProjectGroupEvents.Create;
begin
  FOnErrorEventSink := 0;
  FOnErrorEventHandler := nil;
  FOnProgressEventSink := 0;
  FOnProgressEventHandler := nil;
end;

// Setup event handlers:

procedure TIProjectGroupEvents.SetupOnError(const EventSink: IProjectGroupEvents; const EventHandler: TIProjectGroupEventsOnError);
begin
  FOnErrorEventSink := EventSink;
  FOnErrorEventHandler := EventHandler;
end;

procedure TIProjectGroupEvents.SetupOnProgress(const EventSink: IProjectGroupEvents; const EventHandler: TIProjectGroupEventsOnProgress);
begin
  FOnProgressEventSink := EventSink;
  FOnProgressEventHandler := EventHandler;
end;

// Call event handlers:

procedure TIProjectGroupEvents.OnError(const ErrorCode: TErrorCode; const ErrorText: string);
begin
  try
    if Assigned(FOnErrorEventHandler) then
    begin
      FOnErrorEventHandler(FOnErrorEventSink, ErrorCode, PAnsiChar(String2LibUtf8String(ErrorText)));
    end;
  except
  end;
end;

procedure TIProjectGroupEvents.OnProgress(const EventCode: TProgressEvent; const ProgressValue: LongInt; const EventText: string);
begin
  try
    if Assigned(FOnProgressEventHandler) then
    begin
      FOnProgressEventHandler(FOnProgressEventSink, EventCode, ProgressValue, PAnsiChar(String2LibUtf8String(EventText)));
    end;
  except
  end;
end;

// Copy these exports into your main library file.
// This is needed because of FPC bug #tbd.
(*
exports
  GetLibGUID
  // ProjectGroup
,
  ProjectGroupCreate,
  ProjectGroupDestroy,
  ProjectGroupIProjectGroupAddProject,
  ProjectGroupIProjectGroupRunPeriodic,
  ProjectGroupIProjectGroupFinalize,
  SetProjectGroupIProjectGroupEventsOnError,
  SetProjectGroupIProjectGroupEventsOnProgress
  // Project
,
  ProjectCreate,
  ProjectDestroy,
  ProjectIProjectConnect,
  ProjectIProjectDisconnect,
  ProjectIProjectLoadFromFile,
  ProjectIProjectSaveToFile,
  ProjectGetIProjectConnectionFRC,
  ProjectGetIProjectConnectionString
  ;
*)

end.
